{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/paycom-planner-frontend/src/components/EventContexts.jsx\";\nimport React, { useState, createContext, useContext } from \"react\";\nimport axios from \"axios\";\nimport { LoginContext } from \"./LoginContext\";\nexport const EventContexts = createContext();\nexport const EventsProvider = props => {\n  const [isNewEventPopUpOpen, setIsNewEventPopUpOpen] = useState(false);\n  const [isEventPopUpOpen, setIsEventPopUpOpen] = useState(false);\n  const [eventsData, setEventsData] = useState([]);\n  const [eventId, setEventId] = useState(-1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [month, setMonth] = useState(currentDate.getMonth()); // month is zero indexed\n\n  const [day, setDay] = useState(currentDate.getDay());\n  const [eventDate, setEventDate] = useState(new Date(year, month, day));\n  const [eventEdit, setEventEdit] = useState({});\n  const {\n    email\n  } = useContext(LoginContext);\n\n  function handleNewEventData(data) {\n    axios.post(`/events.php`, data).then(res => {\n      if (res.data === \"success\") {\n        setIsNewEventPopUpOpen(!isNewEventPopUpOpen);\n        console.log(res);\n      } else {\n        console.log(res);\n      }\n    });\n    setEventsData([...eventsData, data]);\n  }\n\n  function incrementAttendees(eventId) {\n    let event = eventsData[eventId];\n    deleteEvent(eventId);\n    let array = JSON.parse(event.attendees);\n    array.push(email);\n    event.attendees = JSON.stringify(array);\n    handleNewEventData(event);\n  }\n\n  function openNewEventPopUp(dayNum, eyear, emonth, event = {\n    name: \"\",\n    user: email,\n    description: \"\",\n    date: \"\",\n    attendees: []\n  }) {\n    setDay(dayNum);\n    setEventEdit(event);\n    setEventDate(new Date(eyear, emonth, dayNum));\n    setIsNewEventPopUpOpen(true);\n  }\n\n  function openEventView(index) {\n    setEventId(index);\n    setIsEventPopUpOpen(true);\n  }\n\n  function deleteEvent(index) {\n    axios.post(`/deleteEvent.php`, eventsData[index]).then(res => {\n      if (res !== \"failed\") {\n        setIsEventPopUpOpen(false);\n        let array = [...eventsData];\n        array.splice(index, 1);\n        setEventsData(array);\n      } else {\n        console.log(res);\n      }\n    });\n  }\n\n  function editEvent(index) {\n    let event = eventsData[index];\n    let dayNum = new Date(parseInt(event.date)).getDate();\n    deleteEvent(index);\n    openNewEventPopUp(dayNum, event);\n  }\n\n  return /*#__PURE__*/React.createElement(EventContexts.Provider, {\n    value: {\n      isNewEventPopUpOpen,\n      setIsNewEventPopUpOpen,\n      eventDate,\n      eventsData,\n      setEventsData,\n      openEventView,\n      openNewEventPopUp,\n      handleNewEventData,\n      eventId,\n      isEventPopUpOpen,\n      setIsEventPopUpOpen,\n      deleteEvent,\n      year,\n      month,\n      day,\n      setYear,\n      setMonth,\n      setDay,\n      setCurrentDate,\n      editEvent,\n      eventEdit,\n      incrementAttendees\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/home/jacob/Documents/paycom-planner-frontend/src/components/EventContexts.jsx"],"names":["React","useState","createContext","useContext","axios","LoginContext","EventContexts","EventsProvider","props","isNewEventPopUpOpen","setIsNewEventPopUpOpen","isEventPopUpOpen","setIsEventPopUpOpen","eventsData","setEventsData","eventId","setEventId","currentDate","setCurrentDate","Date","year","setYear","getFullYear","month","setMonth","getMonth","day","setDay","getDay","eventDate","setEventDate","eventEdit","setEventEdit","email","handleNewEventData","data","post","then","res","console","log","incrementAttendees","event","deleteEvent","array","JSON","parse","attendees","push","stringify","openNewEventPopUp","dayNum","eyear","emonth","name","user","description","date","openEventView","index","splice","editEvent","parseInt","getDate","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useContext } from \"react\";\nimport axios from \"axios\";\nimport { LoginContext } from \"./LoginContext\";\n\nexport const EventContexts = createContext();\n\nexport const EventsProvider = (props) => {\n  const [isNewEventPopUpOpen, setIsNewEventPopUpOpen] = useState(false);\n  const [isEventPopUpOpen, setIsEventPopUpOpen] = useState(false);\n  const [eventsData, setEventsData] = useState([]);\n  const [eventId, setEventId] = useState(-1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [month, setMonth] = useState(currentDate.getMonth()); // month is zero indexed\n  const [day, setDay] = useState(currentDate.getDay());\n  const [eventDate, setEventDate] = useState(new Date(year, month, day));\n  const [eventEdit, setEventEdit] = useState({});\n  const { email } = useContext(LoginContext)\n\n  function handleNewEventData(data) {\n    axios.post(`/events.php`, data)\n      .then(res => {\n        if(res.data === \"success\"){\n          setIsNewEventPopUpOpen(!isNewEventPopUpOpen);\n          console.log(res);\n        }else{\n          console.log(res);\n        }\n      });\n    setEventsData([...eventsData, data]);\n  }\n\n  function incrementAttendees(eventId){\n    let event = eventsData[eventId];\n    deleteEvent(eventId);\n    let array = JSON.parse(event.attendees);\n    array.push(email);\n    event.attendees = JSON.stringify(array);\n    handleNewEventData(event);\n  }\n\n  function openNewEventPopUp(dayNum, eyear, emonth, event = { name: \"\", user: email, description: \"\", date: \"\", attendees: [] }) {\n    setDay(dayNum);\n    setEventEdit(event);\n    setEventDate(new Date(eyear, emonth, dayNum));\n    setIsNewEventPopUpOpen(true);\n  }\n\n  function openEventView(index) {\n    setEventId(index);\n    setIsEventPopUpOpen(true);\n  }\n\n  function deleteEvent(index) {\n    axios.post(`/deleteEvent.php`, eventsData[index])\n      .then(res => {\n        if(res !== \"failed\"){\n          setIsEventPopUpOpen(false);\n          let array = [...eventsData];\n          array.splice(index, 1);\n          setEventsData(array);\n        }else{\n          console.log(res);\n        }\n      });\n    \n  }\n\n  function editEvent(index) {\n    let event = eventsData[index];\n    let dayNum = new Date(parseInt(event.date)).getDate();\n    deleteEvent(index);\n    openNewEventPopUp(dayNum, event);\n  }\n\n  return (\n    <EventContexts.Provider\n      value={{\n        isNewEventPopUpOpen,\n        setIsNewEventPopUpOpen,\n        eventDate,\n        eventsData,\n        setEventsData,\n        openEventView,\n        openNewEventPopUp,\n        handleNewEventData,\n        eventId,\n        isEventPopUpOpen,\n        setIsEventPopUpOpen,\n        deleteEvent,\n        year,\n        month,\n        day,\n        setYear,\n        setMonth,\n        setDay,\n        setCurrentDate,\n        editEvent,\n        eventEdit,\n        incrementAttendees,\n      }}\n    >\n      {props.children}\n    </EventContexts.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}