{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/paycom-planner-frontend/src/App.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\"; //import { Calendar } from \"@material-ui/pickers\";\n//import { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n//import DateFnsUtils from \"@date-io/date-fns\";\n\nimport styled from \"@emotion/styled\";\nimport MonthCalendar from \"./components/MonthCalendar\";\nimport { Button } from \"react-bootstrap\";\nimport NewEventPopUp from \"./components/NewEventPopUp\";\nimport CurrentEventPopUp from \"./components/CurrentEventPopUp\";\nimport { EventContexts } from \"./components/EventContexts\";\nimport { LoginContext } from \"./components/LoginContext\";\nimport LoginPopUp from \"./components/LoginPopUp\";\nimport axios from \"axios\";\nconst Title = styled.h1`\n  color: yellowgreen;\n`;\nconst ButtonWrap = styled.div`\n  & .login {\n    position: relative;\n    background: lightgreen;\n    color: black;\n    left: 39%;\n    margin-bottom: 10px;\n  }\n`;\n\nfunction App() {\n  const {\n    isNewEventPopUpOpen,\n    isEventPopUpOpen\n  } = useContext(EventContexts);\n  const {\n    isLoginPopUpOpen,\n    openLoginPopUp,\n    email\n  } = useContext(LoginContext);\n  /*function getEmail(){\n    axios.get(`/session.php`)\n      .then(res => {\n        setEmail(res.data);\n      });\n  }*/\n\n  useEffect(() => {\n    axios.get(`/getEvents.php`).then(res => {\n      console.log(JSON.parse(myjsonstring));\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Paycom Project Planner\"), email !== \"\" ? /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }\n  }, email) : null, /*#__PURE__*/React.createElement(ButtonWrap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: openLoginPopUp,\n    className: \"login\",\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Log In\")), /*#__PURE__*/React.createElement(MonthCalendar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, isLoginPopUpOpen ? /*#__PURE__*/React.createElement(LoginPopUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 32\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, isNewEventPopUpOpen ? /*#__PURE__*/React.createElement(NewEventPopUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 35\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, isEventPopUpOpen ? /*#__PURE__*/React.createElement(CurrentEventPopUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 32\n    }\n  }) : null));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/jacob/Documents/paycom-planner-frontend/src/App.js"],"names":["React","useState","useContext","useEffect","styled","MonthCalendar","Button","NewEventPopUp","CurrentEventPopUp","EventContexts","LoginContext","LoginPopUp","axios","Title","h1","ButtonWrap","div","App","isNewEventPopUpOpen","isEventPopUpOpen","isLoginPopUpOpen","openLoginPopUp","email","get","then","res","console","log","JSON","parse","myjsonstring","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAO,WAAP,C,CACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAGT,MAAM,CAACU,EAAG;;CAAxB;AAIA,MAAMC,UAAU,GAAGX,MAAM,CAACY,GAAI;;;;;;;;CAA9B;;AAUA,SAASC,GAAT,GAAe;AACb,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA;AAAvB,MAA4CjB,UAAU,CAACO,aAAD,CAA5D;AACA,QAAM;AAAEW,IAAAA,gBAAF;AAAoBC,IAAAA,cAApB;AAAoCC,IAAAA;AAApC,MAA8CpB,UAAU,CAACQ,YAAD,CAA9D;AAEA;;;;;;;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAACW,GAAN,CAAW,gBAAX,EACGC,IADH,CACQC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAWC,YAAX,CAAZ;AACD,KAHH;AAID,GALQ,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEGR,KAAK,KAAK,EAAV,gBAAe;AAAG,IAAA,KAAK,EAAE;AAACS,MAAAA,MAAM,EAAE;AAAT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BT,KAA1B,CAAf,GAAsD,IAFzD,eAGE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,cAAjB;AAAiC,IAAA,SAAS,EAAC,OAA3C;AAAmD,IAAA,OAAO,EAAC,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAHF,eAQE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,gBAAgB,gBAAG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,IAA1C,CATF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,mBAAmB,gBAAG,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAuB,IAAhD,CAVF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,gBAAgB,gBAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA2B,IAAjD,CAXF,CADF;AAeD;;AAED,eAAeF,GAAf","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\n//import { Calendar } from \"@material-ui/pickers\";\n//import { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n//import DateFnsUtils from \"@date-io/date-fns\";\nimport styled from \"@emotion/styled\";\nimport MonthCalendar from \"./components/MonthCalendar\";\nimport { Button } from \"react-bootstrap\";\nimport NewEventPopUp from \"./components/NewEventPopUp\";\nimport CurrentEventPopUp from \"./components/CurrentEventPopUp\";\nimport { EventContexts } from \"./components/EventContexts\";\nimport { LoginContext } from \"./components/LoginContext\";\nimport LoginPopUp from \"./components/LoginPopUp\";\nimport axios from \"axios\";\n\nconst Title = styled.h1`\n  color: yellowgreen;\n`;\n\nconst ButtonWrap = styled.div`\n  & .login {\n    position: relative;\n    background: lightgreen;\n    color: black;\n    left: 39%;\n    margin-bottom: 10px;\n  }\n`;\n\nfunction App() {\n  const { isNewEventPopUpOpen, isEventPopUpOpen } = useContext(EventContexts);\n  const { isLoginPopUpOpen, openLoginPopUp, email } = useContext(LoginContext);\n\n  /*function getEmail(){\n    axios.get(`/session.php`)\n      .then(res => {\n        setEmail(res.data);\n      });\n  }*/\n  useEffect(() => {   \n    axios.get(`/getEvents.php`)\n      .then(res => {\n        console.log(JSON.parse(myjsonstring));\n      });\n  })\n\n  return (\n    <div className=\"App\">\n      <Title color=\"primary\">Paycom Project Planner</Title>\n      {email !== \"\" ? <p style={{margin: '0'}}>{email}</p> : null}\n      <ButtonWrap>\n        <Button onClick={openLoginPopUp} className=\"login\" variant=\"success\">\n          Log In\n        </Button>\n      </ButtonWrap>\n      <MonthCalendar />\n      <div>{isLoginPopUpOpen ? <LoginPopUp /> : null}</div>\n      <div>{isNewEventPopUpOpen ? <NewEventPopUp /> : null}</div>\n      <div>{isEventPopUpOpen ? <CurrentEventPopUp /> : null}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}