{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/paycom-planner-frontend/src/components/EventContexts.jsx\";\nimport React, { useState, createContext, useContext } from \"react\";\nimport axios from \"axios\";\nimport { LoginContext } from \"./LoginContext\";\nexport const EventContexts = createContext();\nexport const EventsProvider = props => {\n  const [isNewEventPopUpOpen, setIsNewEventPopUpOpen] = useState(false);\n  const [isEventPopUpOpen, setIsEventPopUpOpen] = useState(false);\n  const [eventsData, setEventsData] = useState([]);\n  const [eventId, setEventId] = useState(-1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [month, setMonth] = useState(currentDate.getMonth()); // month is zero indexed\n\n  const [day, setDay] = useState(currentDate.getDay());\n  const [eventDate, setEventDate] = useState(new Date(year, month, day));\n  const [eventEdit, setEventEdit] = useState({\n    name: \"\",\n    user: \"\",\n    description: \"\",\n    date: \"\"\n  });\n  const {\n    email\n  } = useContext(LoginContext);\n\n  function handleNewEventData(data) {\n    axios.post(`/events.php`, data).then(res => {\n      if (res.data === \"success\") {\n        setIsNewEventPopUpOpen(!isNewEventPopUpOpen);\n        console.log(res.data);\n      } else {\n        console.log(res);\n      }\n    });\n    setEventsData([...eventsData, data]);\n  }\n\n  function openNewEventPopUp(dayNum, event = {\n    name: \"\",\n    user: email,\n    description: \"\",\n    date: \"\"\n  }) {\n    setDay(dayNum);\n    setEventEdit(event);\n    setEventDate(new Date(year, month, dayNum));\n    setIsNewEventPopUpOpen(true);\n  }\n\n  function openEventView(index) {\n    setEventId(index);\n    setIsEventPopUpOpen(true);\n  }\n\n  function deleteEvent(index) {\n    axios.post(`/deleteEvent.php`, eventsData[index]).then(res => {\n      if (res !== \"failed\") {\n        setIsEventPopUpOpen(false);\n        let array = [...eventsData];\n        array.splice(index, 1);\n        setEventsData(array);\n      } else {\n        console.log(res);\n      }\n    });\n  }\n\n  function editEvent(index) {\n    let event = eventsData[index];\n    let dayNum = new Date(parseInt(event.date)).getDate();\n    deleteEvent(index);\n    openNewEventPopUp(dayNum, event);\n  }\n\n  return /*#__PURE__*/React.createElement(EventContexts.Provider, {\n    value: {\n      isNewEventPopUpOpen,\n      setIsNewEventPopUpOpen,\n      eventDate,\n      eventsData,\n      setEventsData,\n      openEventView,\n      openNewEventPopUp,\n      handleNewEventData,\n      eventId,\n      isEventPopUpOpen,\n      setIsEventPopUpOpen,\n      deleteEvent,\n      year,\n      month,\n      day,\n      setYear,\n      setMonth,\n      setDay,\n      setCurrentDate,\n      editEvent,\n      eventEdit\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/home/jacob/Documents/paycom-planner-frontend/src/components/EventContexts.jsx"],"names":["React","useState","createContext","useContext","axios","LoginContext","EventContexts","EventsProvider","props","isNewEventPopUpOpen","setIsNewEventPopUpOpen","isEventPopUpOpen","setIsEventPopUpOpen","eventsData","setEventsData","eventId","setEventId","currentDate","setCurrentDate","Date","year","setYear","getFullYear","month","setMonth","getMonth","day","setDay","getDay","eventDate","setEventDate","eventEdit","setEventEdit","name","user","description","date","email","handleNewEventData","data","post","then","res","console","log","openNewEventPopUp","dayNum","event","openEventView","index","deleteEvent","array","splice","editEvent","parseInt","getDate","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useContext } from \"react\";\nimport axios from \"axios\";\nimport { LoginContext } from \"./LoginContext\";\n\nexport const EventContexts = createContext();\n\nexport const EventsProvider = (props) => {\n  const [isNewEventPopUpOpen, setIsNewEventPopUpOpen] = useState(false);\n  const [isEventPopUpOpen, setIsEventPopUpOpen] = useState(false);\n  const [eventsData, setEventsData] = useState([]);\n  const [eventId, setEventId] = useState(-1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [month, setMonth] = useState(currentDate.getMonth()); // month is zero indexed\n  const [day, setDay] = useState(currentDate.getDay());\n  const [eventDate, setEventDate] = useState(new Date(year, month, day));\n  const [eventEdit, setEventEdit] = useState({ name: \"\", user: \"\", description: \"\", date: \"\" });\n  const { email } = useContext(LoginContext)\n\n  function handleNewEventData(data) {\n    axios.post(`/events.php`, data)\n      .then(res => {\n        if(res.data === \"success\"){\n          setIsNewEventPopUpOpen(!isNewEventPopUpOpen);\n          console.log(res.data);\n        }else{\n          console.log(res);\n        }\n      });\n    setEventsData([...eventsData, data]);\n  }\n\n  function openNewEventPopUp(dayNum, event = { name: \"\", user: email, description: \"\", date: \"\" }) {\n    setDay(dayNum);\n    setEventEdit(event);\n    setEventDate(new Date(year, month, dayNum));\n    setIsNewEventPopUpOpen(true);\n  }\n\n  function openEventView(index) {\n    setEventId(index);\n    setIsEventPopUpOpen(true);\n  }\n\n  function deleteEvent(index) {\n    axios.post(`/deleteEvent.php`, eventsData[index])\n      .then(res => {\n        if(res !== \"failed\"){\n          setIsEventPopUpOpen(false);\n          let array = [...eventsData];\n          array.splice(index, 1);\n          setEventsData(array);\n        }else{\n          console.log(res);\n        }\n      });\n    \n  }\n\n  function editEvent(index) {\n    let event = eventsData[index];\n    let dayNum = new Date(parseInt(event.date)).getDate();\n    deleteEvent(index);\n    openNewEventPopUp(dayNum, event);\n  }\n\n  return (\n    <EventContexts.Provider\n      value={{\n        isNewEventPopUpOpen,\n        setIsNewEventPopUpOpen,\n        eventDate,\n        eventsData,\n        setEventsData,\n        openEventView,\n        openNewEventPopUp,\n        handleNewEventData,\n        eventId,\n        isEventPopUpOpen,\n        setIsEventPopUpOpen,\n        deleteEvent,\n        year,\n        month,\n        day,\n        setYear,\n        setMonth,\n        setDay,\n        setCurrentDate,\n        editEvent,\n        eventEdit,\n      }}\n    >\n      {props.children}\n    </EventContexts.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}