{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/paycom-planner-frontend/src/components/NewEventPopUp.jsx\";\nimport React, { useState, useContext } from \"react\";\nimport styled from \"@emotion/styled\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { KeyboardTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { EventContexts } from \"./EventContexts\";\nconst PopUpOuter = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\nconst PopUpInner = styled.div`\n  position: absolute;\n  width: 50%;\n  height: 50%;\n  min-width: 350px;\n  position: fixed;\n  left: 50%;\n  bottom: 35%;\n  transform: translateX(-50%);\n  margin: auto;\n  border-radius: 20px;\n  background: white;\n`;\nconst XButton = styled.div`\n  border: 1px solid lightgray;\n  color: white;\n  background: lightgray;\n  height: 18px;\n  width: 18px;\n  cursor: pointer;\n  margin-right: 10px;\n  line-height: 17px;\n  border-radius: 50%;\n`;\nconst RightFlexBox = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  padding-top: 10px;\n`;\nconst TextArea = styled.textarea`\n  resize: none;\n  width: 90%;\n  max-width: 90%;\n  height: calc(130px + 5vw);\n  border-radius: 15px;\n  border: 2px solid #73ad21;\n`;\nconst P = styled.p`\n  margin-bottom: 0;\n`;\nconst Input = styled.input`\n  height: 25px;\n  border: 2px solid #73ad21;\n  border-radius: 5px;\n  width: 50%;\n`;\nconst CenterFlexBox = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nexport default function NewEventPopUp() {\n  const {\n    isNewEventPopUpOpen,\n    setIsNewEventPopUpOpen,\n    handleNewEventData,\n    eventDate,\n    eventEdit\n  } = useContext(EventContexts);\n  let eventDateCopy = new Date(eventDate.getTime());\n  let currentTime = new Date();\n  eventDateCopy.setHours(currentTime.getHours());\n  eventDateCopy.setMinutes(currentTime.getMinutes());\n  eventDateCopy.setSeconds(currentTime.getSeconds());\n  eventDateCopy.setMilliseconds(currentTime.getMilliseconds());\n  const [selectedDate, setSelectedDate] = useState(eventDateCopy);\n  const [eventName, setEventName] = useState(eventEdit.name);\n  const [eventDesc, setEventDesc] = useState(eventEdit.desc);\n\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  function handleSubmit() {\n    handleNewEventData({\n      name: eventName,\n      date: selectedDate.toDateString(),\n      desc: eventDesc\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(PopUpOuter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PopUpInner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RightFlexBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(XButton, {\n    onClick: () => setIsNewEventPopUpOpen(!isNewEventPopUpOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Create New Event:\"), /*#__PURE__*/React.createElement(CenterFlexBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"Event Name:\"), /*#__PURE__*/React.createElement(Input, {\n    value: eventName,\n    onChange: e => setEventName(e.target.value),\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardTimePicker, {\n    margin: \"normal\",\n    id: \"time-picker\",\n    label: \"Time picker\",\n    value: selectedDate,\n    onChange: handleDateChange,\n    KeyboardButtonProps: {\n      \"aria-label\": \"change time\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(P, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Description:\"), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: e => setEventDesc(e.target.value),\n    value: eventDesc,\n    name: \"paragraph_text\",\n    cols: \"50\",\n    rows: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: handleSubmit,\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/jacob/Documents/paycom-planner-frontend/src/components/NewEventPopUp.jsx"],"names":["React","useState","useContext","styled","DateFnsUtils","KeyboardTimePicker","MuiPickersUtilsProvider","EventContexts","PopUpOuter","div","PopUpInner","XButton","RightFlexBox","TextArea","textarea","P","p","Input","input","CenterFlexBox","NewEventPopUp","isNewEventPopUpOpen","setIsNewEventPopUpOpen","handleNewEventData","eventDate","eventEdit","eventDateCopy","Date","getTime","currentTime","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","selectedDate","setSelectedDate","eventName","setEventName","name","eventDesc","setEventDesc","desc","handleDateChange","date","handleSubmit","toDateString","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport styled from \"@emotion/styled\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardTimePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport { EventContexts } from \"./EventContexts\";\n\nconst PopUpOuter = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nconst PopUpInner = styled.div`\n  position: absolute;\n  width: 50%;\n  height: 50%;\n  min-width: 350px;\n  position: fixed;\n  left: 50%;\n  bottom: 35%;\n  transform: translateX(-50%);\n  margin: auto;\n  border-radius: 20px;\n  background: white;\n`;\n\nconst XButton = styled.div`\n  border: 1px solid lightgray;\n  color: white;\n  background: lightgray;\n  height: 18px;\n  width: 18px;\n  cursor: pointer;\n  margin-right: 10px;\n  line-height: 17px;\n  border-radius: 50%;\n`;\n\nconst RightFlexBox = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  padding-top: 10px;\n`;\n\nconst TextArea = styled.textarea`\n  resize: none;\n  width: 90%;\n  max-width: 90%;\n  height: calc(130px + 5vw);\n  border-radius: 15px;\n  border: 2px solid #73ad21;\n`;\n\nconst P = styled.p`\n  margin-bottom: 0;\n`;\n\nconst Input = styled.input`\n  height: 25px;\n  border: 2px solid #73ad21;\n  border-radius: 5px;\n  width: 50%;\n`;\n\nconst CenterFlexBox = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function NewEventPopUp() {\n  const {\n    isNewEventPopUpOpen,\n    setIsNewEventPopUpOpen,\n    handleNewEventData,\n    eventDate,\n    eventEdit,\n  } = useContext(EventContexts);\n\n  let eventDateCopy = new Date(eventDate.getTime());\n  let currentTime = new Date();\n  eventDateCopy.setHours(currentTime.getHours());\n  eventDateCopy.setMinutes(currentTime.getMinutes());\n  eventDateCopy.setSeconds(currentTime.getSeconds());\n  eventDateCopy.setMilliseconds(currentTime.getMilliseconds());\n\n  const [selectedDate, setSelectedDate] = useState(eventDateCopy);\n  const [eventName, setEventName] = useState(eventEdit.name);\n  const [eventDesc, setEventDesc] = useState(eventEdit.desc);\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  function handleSubmit() {\n    handleNewEventData({\n      name: eventName,\n      date: selectedDate.toDateString(),\n      desc: eventDesc,\n    });\n  }\n\n  return (\n    <PopUpOuter>\n      <PopUpInner>\n        <RightFlexBox>\n          <XButton onClick={() => setIsNewEventPopUpOpen(!isNewEventPopUpOpen)}>\n            &times;\n          </XButton>\n        </RightFlexBox>\n        <h2>Create New Event:</h2>\n        <CenterFlexBox>\n          <label>Event Name:</label>\n          <Input\n            value={eventName}\n            onChange={(e) => setEventName(e.target.value)}\n            type=\"text\"\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardTimePicker\n              margin=\"normal\"\n              id=\"time-picker\"\n              label=\"Time picker\"\n              value={selectedDate}\n              onChange={handleDateChange}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change time\",\n              }}\n            />\n          </MuiPickersUtilsProvider>\n        </CenterFlexBox>\n        <P>Description:</P>\n        <TextArea\n          onChange={(e) => setEventDesc(e.target.value)}\n          value={eventDesc}\n          name=\"paragraph_text\"\n          cols=\"50\"\n          rows=\"10\"\n        ></TextArea>\n        <br></br>\n        <input onClick={handleSubmit} type=\"submit\" value=\"Submit\" />\n      </PopUpInner>\n    </PopUpOuter>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}