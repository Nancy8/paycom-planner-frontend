{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/paycom-planner-frontend/src/components/EventContexts.jsx\";\nimport React, { useState, createContext } from \"react\";\nexport const EventContexts = createContext();\nexport const EventsProvider = props => {\n  const [isNewEventPopUpOpen, setIsNewEventPopUpOpen] = useState(false);\n  const [isEventPopUpOpen, setIsEventPopUpOpen] = useState(false);\n  const [eventsData, setEventsData] = useState([]);\n  const [eventId, setEventId] = useState(-1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [month, setMonth] = useState(currentDate.getMonth()); // month is zero indexed\n\n  const [day, setDay] = useState(currentDate.getDay());\n  const [eventDate, setEventDate] = useState(new Date(year, month, day));\n  const [eventEdit, setEventEdit] = useState({\n    name: \"\",\n    desc: \"\",\n    date: \"\"\n  });\n\n  function handleNewEventData(data) {\n    setIsNewEventPopUpOpen(!isNewEventPopUpOpen);\n    setEventsData([...eventsData, data]);\n    axios.post(`/events.php`, data).then(res => {\n      if (res.data !== \"Not logged in\") {\n        openNewEventPopUp(dateNum);\n        console.log(res.data);\n      } else {\n        console.log(res.data);\n      }\n    });\n  }\n\n  function openNewEventPopUp(dayNum, event = {\n    name: \"\",\n    desc: \"\",\n    date: \"\"\n  }) {\n    setDay(dayNum);\n    setEventEdit(event);\n    setEventDate(new Date(year, month, dayNum));\n    setIsNewEventPopUpOpen(true);\n  }\n\n  function openEventView(index) {\n    setEventId(index);\n    setIsEventPopUpOpen(true);\n  }\n\n  function deleteEvent(index) {\n    setIsEventPopUpOpen(false);\n    let array = [...eventsData];\n    array.splice(index, 1);\n    setEventsData(array);\n  }\n\n  function editEvent(index) {\n    let event = eventsData[index];\n    let dayNum = event.date.getDate();\n    deleteEvent(index);\n    openNewEventPopUp(dayNum, event);\n  }\n\n  return /*#__PURE__*/React.createElement(EventContexts.Provider, {\n    value: {\n      isNewEventPopUpOpen,\n      setIsNewEventPopUpOpen,\n      eventDate,\n      eventsData,\n      openEventView,\n      openNewEventPopUp,\n      handleNewEventData,\n      eventId,\n      isEventPopUpOpen,\n      setIsEventPopUpOpen,\n      deleteEvent,\n      year,\n      month,\n      day,\n      setYear,\n      setMonth,\n      setDay,\n      setCurrentDate,\n      editEvent,\n      eventEdit\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/home/jacob/Documents/paycom-planner-frontend/src/components/EventContexts.jsx"],"names":["React","useState","createContext","EventContexts","EventsProvider","props","isNewEventPopUpOpen","setIsNewEventPopUpOpen","isEventPopUpOpen","setIsEventPopUpOpen","eventsData","setEventsData","eventId","setEventId","currentDate","setCurrentDate","Date","year","setYear","getFullYear","month","setMonth","getMonth","day","setDay","getDay","eventDate","setEventDate","eventEdit","setEventEdit","name","desc","date","handleNewEventData","data","axios","post","then","res","openNewEventPopUp","dateNum","console","log","dayNum","event","openEventView","index","deleteEvent","array","splice","editEvent","getDate","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from \"react\";\n\nexport const EventContexts = createContext();\n\nexport const EventsProvider = (props) => {\n  const [isNewEventPopUpOpen, setIsNewEventPopUpOpen] = useState(false);\n  const [isEventPopUpOpen, setIsEventPopUpOpen] = useState(false);\n  const [eventsData, setEventsData] = useState([]);\n  const [eventId, setEventId] = useState(-1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [month, setMonth] = useState(currentDate.getMonth()); // month is zero indexed\n  const [day, setDay] = useState(currentDate.getDay());\n  const [eventDate, setEventDate] = useState(new Date(year, month, day));\n  const [eventEdit, setEventEdit] = useState({ name: \"\", desc: \"\", date: \"\" });\n\n  function handleNewEventData(data) {\n    setIsNewEventPopUpOpen(!isNewEventPopUpOpen);\n    setEventsData([...eventsData, data]);\n    axios.post(`/events.php`, data)\n      .then(res => {\n        if(res.data !== \"Not logged in\"){\n          openNewEventPopUp(dateNum);\n          console.log(res.data);\n        }else{\n          console.log(res.data);\n        }\n      });\n  }\n\n  function openNewEventPopUp(dayNum, event = { name: \"\", desc: \"\", date: \"\" }) {\n    setDay(dayNum);\n    setEventEdit(event);\n    setEventDate(new Date(year, month, dayNum));\n    setIsNewEventPopUpOpen(true);\n  }\n\n  function openEventView(index) {\n    setEventId(index);\n    setIsEventPopUpOpen(true);\n  }\n\n  function deleteEvent(index) {\n    setIsEventPopUpOpen(false);\n    let array = [...eventsData];\n    array.splice(index, 1);\n    setEventsData(array);\n  }\n\n  function editEvent(index) {\n    let event = eventsData[index];\n    let dayNum = event.date.getDate();\n    deleteEvent(index);\n    openNewEventPopUp(dayNum, event);\n  }\n\n  return (\n    <EventContexts.Provider\n      value={{\n        isNewEventPopUpOpen,\n        setIsNewEventPopUpOpen,\n        eventDate,\n        eventsData,\n        openEventView,\n        openNewEventPopUp,\n        handleNewEventData,\n        eventId,\n        isEventPopUpOpen,\n        setIsEventPopUpOpen,\n        deleteEvent,\n        year,\n        month,\n        day,\n        setYear,\n        setMonth,\n        setDay,\n        setCurrentDate,\n        editEvent,\n        eventEdit,\n      }}\n    >\n      {props.children}\n    </EventContexts.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}